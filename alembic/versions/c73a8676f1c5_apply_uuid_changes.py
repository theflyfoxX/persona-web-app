"""Apply UUID changes

Revision ID: c73a8676f1c5
Revises: ae9d8dda08f5
Create Date: 2025-01-27 23:20:37.960968

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c73a8676f1c5'
down_revision: Union[str, None] = 'ae9d8dda08f5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    op.create_table(
        'users',
        sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text('uuid_generate_v4()')),
        sa.Column('username', sa.VARCHAR(), nullable=False),
        sa.Column('email', sa.VARCHAR(), nullable=False, unique=True),
        sa.Column('password', sa.VARCHAR(), nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.func.now()),
        sa.Column('updated_at', postgresql.TIMESTAMP(), onupdate=sa.func.now()),
    )
    
    op.create_table(
        'posts',
        sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text('uuid_generate_v4()')),
        sa.Column('title', sa.VARCHAR(), nullable=False),
        sa.Column('content', sa.VARCHAR(), nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.func.now()),
        sa.Column('updated_at', postgresql.TIMESTAMP(), onupdate=sa.func.now()),
        sa.Column('user_id', sa.UUID(as_uuid=True), sa.ForeignKey('users.id', ondelete='CASCADE'), nullable=False),
        sa.Column('like_count', sa.INTEGER(), default=0, nullable=False),
    )
    
    op.create_table(
        'likes',
        sa.Column('id', sa.UUID(as_uuid=True), primary_key=True, server_default=sa.text('uuid_generate_v4()')),
        sa.Column('user_id', sa.UUID(as_uuid=True), sa.ForeignKey('users.id', ondelete='CASCADE'), nullable=False),
        sa.Column('post_id', sa.UUID(as_uuid=True), sa.ForeignKey('posts.id', ondelete='CASCADE'), nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.func.now()),
    )


def downgrade() -> None:
    pass
    # ### commands auto generated by Alembic - please adjust! ###
   